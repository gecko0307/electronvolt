/*
Copyright (c) 2024 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module scenes.game;

import std.stdio;
import std.algorithm;
import std.math;
import std.regex;
import std.random;

import dagon;
import loading;
import ui;
import dagon.ext.newton;
import audio;

Vector2f lissajousCurve(float t)
{
    return Vector2f(sin(t), cos(2 * t));
}

extern(C)
{
    void itemContactsProcess(
        const NewtonJoint* contactJoint,
        dFloat timestep,
        int threadIndex)
    {
        NewtonBody* b0 = NewtonJointGetBody0(contactJoint);
        NewtonBody* b1 = NewtonJointGetBody1(contactJoint);
        
        void* nextContact;
        uint numContacts = 0;
        for (void* contact = NewtonContactJointGetFirstContact(contactJoint); contact; contact = nextContact)
        {
            nextContact = NewtonContactJointGetNextContact(contactJoint, contact);
            numContacts++;
        }
        
        if (numContacts)
        {
            NewtonRigidBody body0 = cast(NewtonRigidBody)NewtonBodyGetUserData(b0);
            NewtonRigidBody body1 = cast(NewtonRigidBody)NewtonBodyGetUserData(b1);
            
            if (body0)
            {
                body0.onCollision(body1);
            }
        }
    }
}

/*
class GameScene: Scene
{
    Game game;
    UI ui;
    
    GameLoadingScreen loadingScreen;
    Camera camera;
    FirstPersonViewComponent fpview;
    TextureAsset aTexEnvmap;
    TextureAsset aTexBrdf;
    
    OBJAsset map;
    TextureAsset brickBaseColor;
    TextureAsset brickNormal;
    
    Entity eCharacter;
    NewtonCharacterComponent character;
    NewtonPhysicsWorld physicsWorld;
    
    Light sun;

    this(Game game, UI ui)
    {
        super(game);
        this.game = game;
        this.ui = ui;
        loadingScreen = New!GameLoadingScreen("assets/ui/bg1.jpg", game, this);
    }
    
    override void beforeLoad()
    {
        map = addOBJAsset("assets/maps/test.obj");
        brickBaseColor = addTextureAsset("assets/maps/brick-base-color.png");
        brickNormal = addTextureAsset("assets/maps/brick-normal.png");
        
        aTexEnvmap = addTextureAsset("assets/envmap.dds");
        aTexBrdf = addTextureAsset("assets/brdf.dds");
        
        focused = false;
    }
    
    override void onLoad(Time t, float progress)
    {
        loadingScreen.update(t, progress);
        loadingScreen.render();
    }

    override void afterLoad()
    {
        focused = true;
        
        game.deferredRenderer.ssaoEnabled = true;
        game.deferredRenderer.ssaoSamples = 20;
        game.deferredRenderer.ssaoPower = 6.0f;
        game.deferredRenderer.ssaoRadius = 0.5;
        game.deferredRenderer.ssaoDenoise = 0.2f;
        game.deferredRenderer.occlusionBufferDetail = 1.0f;
        game.postProcessingRenderer.fxaaEnabled = true;
        game.postProcessingRenderer.glowEnabled = true;
        game.postProcessingRenderer.glowThreshold = 1.0f;
        game.postProcessingRenderer.glowIntensity = 0.3f;
        game.postProcessingRenderer.glowRadius = 4;
        game.postProcessingRenderer.tonemapper = Tonemapper.AgX_Punchy;
        
        environment.backgroundColor = Color4f(0.8f, 0.9f, 1.0f, 1.0f);
        environment.fogColor = environment.backgroundColor;
        environment.fogStart = 500.0f;
        environment.fogEnd = 1000.0f;
        //environment.ambientMap = aTexEnvmap.texture;
        //environment.ambientBRDF = aTexBrdf.texture;
        environment.ambientColor = environment.backgroundColor;
        environment.ambientEnergy = 0.5f; //0.25f;
        aTexBrdf.texture.useMipmapFiltering = false;
        aTexBrdf.texture.enableRepeat(false);
        
        physicsWorld = New!NewtonPhysicsWorld(eventManager, assetManager);
        
        camera = addCamera();
        camera.position = Vector3f(1.0f, 2.0f, 0.0f);
        fpview = New!FirstPersonViewComponent(eventManager, camera);
        game.renderer.activeCamera = camera;

        sun = addLight(LightType.Sun);
        sun.shadowEnabled = true;
        sun.energy = 10.0f;
        //sun.scatteringEnabled = true;
        //sun.scattering = 0.3f;
        //sun.mediumDensity = 0.075f;
        //sun.scatteringUseShadow = true;
        //sun.scatteringMaxRandomStepOffset = 0.055f;
        sun.pitch(-45.0f);
        sun.turn(45.0f);
        environment.sun = sun;
        
        auto sky = addEntity();
        sky.layer = EntityLayer.Background;
        auto psync = New!PositionSync(eventManager, sky, camera);
        sky.drawable = New!ShapeBox(Vector3f(1.0f, 1.0f, 1.0f), assetManager);
        sky.scaling = Vector3f(100.0f, 100.0f, 100.0f);
        sky.material = addMaterial();
        sky.material.depthWrite = false;
        sky.material.useCulling = false;
        sky.material.shader = New!RayleighShader(assetManager);
        
        auto mBrick = addMaterial();
        mBrick.baseColorTexture = brickBaseColor.texture;
        mBrick.normalTexture = brickNormal.texture;
        
        auto eMap = addEntity();
        eMap.material = mBrick;
        eMap.drawable = map.mesh;
        auto mapShape = New!NewtonMeshShape(map.mesh, physicsWorld);
        NewtonRigidBody mapBody = physicsWorld.createStaticBody(mapShape);
        auto mapBodyController = New!NewtonBodyComponent(eventManager, eMap, mapBody);
        
        eCharacter = addEntity();
        eCharacter.position = Vector3f(0, 2, 20);
        character = eCharacter.makeCharacter(physicsWorld, 1.8f, 80.0f);
        
        onReset();
    }
    
    override void onReset()
    {
        game.hudRenderer.passHUD.clear = false;
        
        if (camera)
            game.renderer.activeCamera = camera;
        
        paused = false;
        
        playMusic("assets/music/frazil-ice.mp3");
    }
    
    override void onKeyDown(int key)
    {
        if (key == KEY_ESCAPE)
        {
            playSound("assets/sfx/close.wav");
            if (paused == false)
                pause();
            else
                resume();
        }
    }
    
    void pause()
    {
        paused = true;
        fpview.active = false;
        eventManager.showCursor(true);
        ui.visible = true;
    }
    
    void resume()
    {
        paused = false;
        fpview.active = true;
        eventManager.showCursor(false);
        ui.visible = false;
    }
    
    override void onUserEvent(int code)
    {
        if (code == 1) // resume
            resume();
    }
    
    override void onUpdate(Time time)
    {
        if (paused)
            return;
        
        updateCharacter();
        physicsWorld.update(time.delta);
        camera.position = character.eyePoint;
    }
    
    void updateCharacter()
    {
        float speed = 6.0f;
        if (inputManager.getButton("left")) character.move(camera.right, -speed);
        if (inputManager.getButton("right")) character.move(camera.right, speed);
        if (inputManager.getButton("forward")) character.move(camera.direction, -speed);
        if (inputManager.getButton("back")) character.move(camera.direction, speed);
        if (inputManager.getButton("jump")) character.jump(2.0f);
        character.updateVelocity();
    }
}
*/

class GameScene: Scene, NewtonRaycaster
{
    Game game;
    UI ui;
    
    GameLoadingScreen loadingScreen;
    
    ImageAsset aEnvmap;
    TextureAsset aBRDF;
    
    OBJAsset aBoxMesh;
    TextureAsset aBoxDiffuse;
    TextureAsset aBoxNormal;
    TextureAsset aBoxRoughnessMetallic;
    
    ImageAsset aHeightmap;
    TextureAsset aRocks;
    TextureAsset aRocksNormal;
    TextureAsset aDirt;
    TextureAsset aDirtNormal;
    TextureAsset aDirtSplatmap;
    GLTFAsset aGravitygun;
    GLTFAsset aCar;
    TextureAsset aTexColorTable;
    
    Entity cameraPivot;
    Camera camera;
    FirstPersonViewComponent fpview;

    Light sun;
    Color4f sunColor = Color4f(1.0f, 0.9f, 0.8f, 1.0f);
    float sunPitch = -20.0f;
    float sunTurn = 180.0f;

    NewtonPhysicsWorld world;
    NewtonBodyComponent[] cubeBodyControllers;
    size_t numCubes = 10;
    
    NewtonRigidBody cubeBody;

    Entity eCharacter;
    NewtonCharacterComponent character;
    
    Entity eCube;
    
    bool jumped = false;
    float footstepTimer = 0.0f;
    uint footstepIndex = 0;
    
    string[2] footstepSounds =
    [
        "assets/sounds/footstep_ground1.wav",
        "assets/sounds/footstep_ground2.wav"
    ];
    
    string[] jumpSounds =
    [
        "assets/sounds/jump1.wav",
        "assets/sounds/jump2.wav",
        "assets/sounds/jump3.wav",
        "assets/sounds/jump4.wav",
        "assets/sounds/jump5.wav"
    ];
    
    Array!string music;
    
    this(Game game, UI ui)
    {
        super(game);
        this.game = game;
        this.ui = ui;
        loadingScreen = New!GameLoadingScreen("assets/ui/bg1.jpg", game, this);
    }

    ~this()
    {
        game.postProcessingRenderer.lutEnabled = false;
        game.postProcessingRenderer.colorLookupTable = null;
        
        if (cubeBodyControllers.length)
            Delete(cubeBodyControllers);
        
        music.free();
    }

    override void beforeLoad()
    {
        // TODO: store sfx and music volumes in a config
        
        foreach (entry; findFiles("assets/music", false)
                .filter!(entry => entry.isFile)
                .filter!(entry => !matchFirst(entry.name, `.*\.(mp3|ogg|flac)$`).empty))
        {
            //auto track = WavStream.create();
            //track.load(entry.name.toStringz);
            //track.setVolume(0.1f);
            music.append(entry.name);
        }
        
        aBoxMesh = addOBJAsset("assets/meshes/box/box.obj");
        aBoxDiffuse = addTextureAsset("assets/meshes/box/box-diffuse.png");
        aBoxNormal = addTextureAsset("assets/meshes/box/box-normal.png");
        aBoxRoughnessMetallic = addTextureAsset("assets/meshes/box/box-roughness-metallic.png");
        
        aEnvmap = addImageAsset("assets/envmaps/mars.png");
        aBRDF = addTextureAsset("assets/envmaps/brdf.dds");
        
        aHeightmap = addImageAsset("assets/terrain/heightmap.png");
        aRocks = addTextureAsset("assets/terrain/rocks-albedo.png");
        aRocksNormal = addTextureAsset("assets/terrain/rocks-normal.png");
        aDirt = addTextureAsset("assets/terrain/dirt-albedo.png");
        aDirtNormal = addTextureAsset("assets/terrain/dirt-normal.png");
        aDirtSplatmap = addTextureAsset("assets/terrain/dirt-splatmap.png");
        
        aGravitygun = addGLTFAsset("assets/meshes/gravitygun/gravitygun.gltf");
        
        aTexColorTable = addTextureAsset("assets/fx/lut.png");
    }
    
    override void onLoad(Time t, float progress)
    {
        loadingScreen.update(t, progress);
        loadingScreen.render();
    }

    override void afterLoad()
    {
        world = New!NewtonPhysicsWorld(eventManager, assetManager);

        cameraPivot = addEntity();
        fpview = New!FirstPersonViewComponent(eventManager, cameraPivot);
        camera = addCamera(cameraPivot);
        //game.renderer.activeCamera = camera;

        environment.backgroundColor = Color4f(0.9f, 0.8f, 1.0f, 1.0f);
        
        auto envCubemap = New!Texture(assetManager);
        envCubemap.createFromEquirectangularMap(aEnvmap.image, 1024);
        envCubemap.enableRepeat = false;
        environment.ambientMap = envCubemap;
        environment.ambientEnergy = 0.4f;
        environment.ambientBRDF = aBRDF.texture;
        aBRDF.texture.useMipmapFiltering = false;
        aBRDF.texture.enableRepeat = false;
        environment.fogColor = Color4f(0.651f, 0.553f, 0.6f, 1.0f);
        environment.fogEnd = 500.0f;
        
        game.deferredRenderer.ssaoEnabled = true;
        game.deferredRenderer.ssaoPower = 4.0f;
        game.deferredRenderer.ssaoRadius = 0.25f;
        game.deferredRenderer.ssaoDenoise = 1.0f;
        game.deferredRenderer.occlusionBufferDetail = 1.0f;
        game.postProcessingRenderer.fxaaEnabled = true;
        
        game.postProcessingRenderer.depthOfFieldEnabled = true;
        game.postProcessingRenderer.autofocus = false;
        game.postProcessingRenderer.fStop = 0.1f;
        game.postProcessingRenderer.focalLength = 1.0f;
        game.postProcessingRenderer.dofManual = true;
        game.postProcessingRenderer.dofNearStart = 1.0;
        game.postProcessingRenderer.dofNearDistance = 1.0;
        game.postProcessingRenderer.dofFarStart = 3.0;
        game.postProcessingRenderer.dofFarDistance = 100.0;
        
        game.postProcessingRenderer.motionBlurEnabled = true;
        game.postProcessingRenderer.glowEnabled = true;
        game.postProcessingRenderer.glowThreshold = 2.0f;
        game.postProcessingRenderer.glowIntensity = 0.5f;
        game.postProcessingRenderer.glowRadius = 5;
        game.postProcessingRenderer.tonemapper = Tonemapper.Unreal;
        game.postProcessingRenderer.exposure = 1.0f;
        game.postProcessingRenderer.lutEnabled = true;
        game.postProcessingRenderer.colorLookupTable = aTexColorTable.texture;
        game.postProcessingRenderer.lensDistortionEnabled = true;
        game.postProcessingRenderer.lensDistortionDispersion = 0.05f;
        
        sun = addLight(LightType.Sun);
        sun.position.y = 50.0f;
        sun.shadowEnabled = true;
        sun.energy = 10.0f;
        sun.scatteringEnabled = true;
        sun.scatteringUseShadow = true;
        sun.scattering = 0.3f;
        sun.mediumDensity = 0.02f;
        sun.scatteringMaxRandomStepOffset = 0.055f;
        sun.color = sunColor;
        sun.rotation =
            rotationQuaternion!float(Axis.y, degtorad(sunTurn)) *
            rotationQuaternion!float(Axis.x, degtorad(sunPitch));
        
        auto eSky = addEntity();
        auto psync = New!PositionSync(eventManager, eSky, camera);
        eSky.drawable = New!ShapeBox(Vector3f(1.0f, 1.0f, 1.0f), assetManager);
        eSky.scaling = Vector3f(100.0f, 100.0f, 100.0f);
        eSky.layer = EntityLayer.Background;
        eSky.gbufferMask = 0.0f;
        eSky.material = New!Material(assetManager);
        eSky.material.depthWrite = false;
        eSky.material.useCulling = false;
        eSky.material.baseColorTexture = envCubemap;
        
        auto box = New!NewtonBoxShape(Vector3f(0.625, 0.607, 0.65), world);
        auto boxMat = addMaterial();
        boxMat.baseColorTexture = aBoxDiffuse.texture;
        boxMat.normalTexture = aBoxNormal.texture;
        boxMat.roughnessMetallicTexture = aBoxRoughnessMetallic.texture;

        cubeBodyControllers = New!(NewtonBodyComponent[])(numCubes);
        int itemGroupID = 1;
        NewtonMaterialSetDefaultFriction(world.newtonWorld, 0, itemGroupID, 0.2f, 0.2f);
        NewtonMaterialSetDefaultElasticity(world.newtonWorld, 0, itemGroupID, 0.2f);
        foreach(i; 0..cubeBodyControllers.length)
        {
            eCube = addEntity();
            eCube.drawable = aBoxMesh.mesh;
            eCube.material = boxMat;
            eCube.position = Vector3f(8, 5 + i * 1.5, 10);
            cubeBodyControllers[i] = eCube.makeDynamicBody(world, box, 500.0f);
            cubeBodyControllers[i].rigidBody.raycastable = true;
        }

        eCharacter = addEntity();
        eCharacter.position = Vector3f(0, 10, 20);
        character = eCharacter.makeCharacter(world, 1.8f, 80.0f);
        
        aGravitygun.markTransparentEntities();
        useEntity(aGravitygun.rootEntity);
        aGravitygun.rootEntity.setParent(camera);
        foreach(node; aGravitygun.nodes)
        {
            useEntity(node.entity);
            node.entity.blurMask = 0.0f;
            node.entity.castShadow = false;
        }
        
        foreach(mat; aGravitygun.materials)
        {
            mat.sun = sun;
        }
        
        auto heightmap = New!ImageHeightmap(aHeightmap.image, 1.0f, assetManager);
        uint terrainRes = 512;
        auto terrain = New!Terrain(terrainRes, 64, heightmap, assetManager);
        Vector3f terrainScale = Vector3f(0.5f, 30.0f, 0.5f);
        auto heightmapShape = New!NewtonHeightmapShape(heightmap, terrainRes, terrainRes, terrainScale, world);
        auto eTerrain = addEntity();
        eTerrain.position = Vector3f(-128, 0, -128);
        eTerrain.makeStaticBody(world, heightmapShape);
        auto eTerrainVisual = addEntity(eTerrain);
        eTerrainVisual.dynamic = false;
        eTerrainVisual.solid = true;
        
        auto terrainMaterial = environment.terrainMaterial;
        
        auto layer1 = terrainMaterial.addLayer();
        layer1.baseColorTexture = aRocks.texture;
        layer1.normalTexture = aRocksNormal.texture;
        layer1.roughnessFactor = 0.5f;
        layer1.textureScale = Vector2f(60, 60);
        
        auto layer2 = terrainMaterial.addLayer();
        layer2.baseColorTexture = aDirt.texture;
        layer2.normalTexture = aDirtNormal.texture;
        layer2.roughnessFactor = 0.7f;
        layer2.maskTexture = aDirtSplatmap.texture;
        layer2.textureScale = Vector2f(70, 70);
        
        eTerrainVisual.material = terrainMaterial;
        eTerrainVisual.drawable = terrain;
        eTerrainVisual.scaling = terrainScale;
        
        onReset();
    }
    
    override void onReset()
    {
        game.hudRenderer.passHUD.clear = false;
        
        if (camera)
            game.renderer.activeCamera = camera;
        
        paused = false;
        
        eventManager.showCursor(false);
        fpview.active = true;
        
        playRandomMusic();
    }
    
    void playRandomMusic()
    {
        if (music.length > 0)
        {
            audio.playMusic(music[uniform(0, $)], true);
        }
    }

    override void onKeyDown(int key)
    {
        if (key == KEY_ESCAPE)
        {
            playSound("assets/sounds/close.wav");
            if (paused)
                resume();
            else
                pause();
        }
    }
    
    override void onMouseButtonDown(int button)
    {
        if (paused)
            return;
        
        if (button == MB_LEFT)
        {
            if (cubeBody)
            {
                cubeBody = null;
                //audio.playSound("assets/sounds/signal.wav");
            }
            else
            {
                raycast(character.eyePoint, character.eyePoint - camera.directionAbsolute * 30.0f);
                if (cubeBody) {
                    audio.playSound("assets/sounds/gravity_gun_activate.wav");
                }
            }
        }
        else if (button == MB_RIGHT)
        {
            if (cubeBody)
            {
                Vector3f f = camera.directionAbsolute * -50000.0f;
                cubeBody.addForce(f);
                cubeBody = null;
            }
            else
            {
                raycast(character.eyePoint, character.eyePoint - camera.directionAbsolute * 30.0f);
                if (cubeBody)
                {
                    Vector3f f = camera.directionAbsolute * -50000.0f;
                    cubeBody.addForce(f);
                    cubeBody = null;
                }
            }
        }
    }
    
    float closestHit = 1.0f;
    
    bool raycast(Vector3f pstart, Vector3f pend)
    {
        closestHit = 1.0f;
        world.raycast(pstart, pend, this);
        return (closestHit < 1.0f);
    }
    
    float onRayHit(NewtonRigidBody nbody, Vector3f hitPoint, Vector3f hitNormal, float t)
    {
        if (nbody.dynamic && t < closestHit)
        {
            cubeBody = nbody;
            closestHit = t;
        }
        return t;
    }
    
    void pause()
    {
        paused = true;
        fpview.active = false;
        eventManager.showCursor(true);
        ui.visible = true;
    }
    
    void resume()
    {
        paused = false;
        fpview.active = true;
        eventManager.showCursor(false);
        ui.visible = false;
    }
    
    override void onUserEvent(int code)
    {
        if (code == 1) // resume
            resume();
    }
    
    bool playerWalking = false;
    float camSwayTime = 0.0f;
    float gunSwayTime = 0.0f;
    
    override void onUpdate(Time t)
    {
        if (paused)
            return;
        
        updateCharacter(t);
        updateWeaponMechanics(t);
        world.update(t.delta);
        updateSway(t);
        updateMusic();
        
        Vector3f cameraPosition = camera.positionAbsolute;
        Vector3f cameraDirection = camera.directionAbsolute;
        Vector3f cameraUp = camera.upAbsolute;
        audio.setListener(cameraPosition, cameraDirection, cameraUp);
    }
    
    void updateCharacter(Time t)
    {
        playerWalking = false;
        const float speed = 4.0f;
        if (inputManager.getButton("strafe_left")) { character.move(camera.rightAbsolute, -speed); playerWalking = true; }
        if (inputManager.getButton("strafe_right")) { character.move(camera.rightAbsolute, speed); playerWalking = true; }
        if (inputManager.getButton("walk_forward")) { character.move(camera.directionAbsolute, -speed); playerWalking = true; }
        if (inputManager.getButton("walk_back")) { character.move(camera.directionAbsolute, speed); playerWalking = true; }
        if (inputManager.getButton("jump"))
        {
            if (!jumped)
            {
                jumped = true;
                audio.playSound(jumpSounds[uniform(0, $)]);
            }
            
            character.jump(2.0f);
        }
        else
        {
            if (character.onGround) jumped = false;
        }
        
        character.updateVelocity();
        
        if (playerWalking && !jumped)
        {
            footstepTimer += t.delta;
            if (footstepTimer > 0.5f) {
                footstepTimer = 0.0;
                audio.playSound(footstepSounds[footstepIndex]);
                footstepIndex = footstepIndex? 0 : 1;
            }
        }
    }
    
    void updateWeaponMechanics(Time t)
    {
        const Vector3f targetPos = character.eyePoint - camera.directionAbsolute * 1.5f;
        if (cubeBody)
        {
            const Vector3f deltaPos = targetPos - cubeBody.position.xyz;
            const Vector3f velocity = deltaPos / t.delta * 0.3f;
            const Vector3f velocityDir = velocity.normalized;
            const float speed = velocity.length;
            if (speed > 10.0f)
                cubeBody.velocity = velocityDir * 10.0f;
            else
                cubeBody.velocity = velocity;
        }
    }
    
    void updateSway(Time t)
    {
        if (playerWalking && character.onGround)
        {
            camSwayTime += 7.0f * t.delta;
            gunSwayTime += 7.0f * t.delta;
        }
        else 
        {
            gunSwayTime += 1.0f * t.delta;
        }

        if (camSwayTime >= 2.0f * PI)
            camSwayTime = 0.0f;
        if (gunSwayTime >= 2.0f * PI)
            gunSwayTime = 0.0f;
        
        cameraPivot.position = character.eyePoint;
        Vector2f camSway = lissajousCurve(camSwayTime) / 15.0f;
        camera.position = Vector3f(camSway.x, camSway.y, 0.0f);

        Vector2f gunSway = lissajousCurve(gunSwayTime) / 15.0f;
        aGravitygun.rootEntity.position = 
            Vector3f(0.1, -0.25, -0.2) + 
            Vector3f(gunSway.x * 0.1f, gunSway.y * 0.1f - fpview.pitch / 90.0f * 0.05f, 0.0f);
        aGravitygun.rootEntity.rotation = rotationQuaternion!float(Axis.x, degtorad(fpview.pitch * 0.1f));
    }
    
    void updateMusic()
    {
        if (music.length > 0)
        {
            if (!musicIsPlaying())
                playRandomMusic();
        }
    }
}
