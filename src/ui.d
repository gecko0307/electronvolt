/*
Copyright (c) 2024 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module ui;

import std.stdio;
import std.conv;
import std.file: write;
import dagon;
import dagon.ext.imgui;
import scenes.mainmenu;
import scenes.game;
import audio;

class UI: EventListener
{
    bool visible = true;
    Game game;
    MainMenuScene mainMenuScene;
    ImGuiContext* igContext;
    ImGuiIO* io;
    ImFont* fontRoboto;
    ImFont* fontIcons;
    ImGuiViewport* viewport;
    
    ImGuiWindowFlags defaultFlags = 
        ImGuiWindowFlags.NoCollapse |
        ImGuiWindowFlags.NoTitleBar |
        ImGuiWindowFlags.NoDecoration |
        ImGuiWindowFlags.NoMove |
        ImGuiWindowFlags.NoMouseInputs |
        ImGuiWindowFlags.NoDocking |
        ImGuiWindowFlags.AlwaysAutoResize;
    
    String[] mainMenuItems = [
        "Start game",
        "Settings",
        "Exit"
    ];
    
    bool[3] mainMenuItemsHovered;
    
    String[] pauseMenuItems = [
        "Continue",
        "Settings",
        "Exit to main menu"
    ];
    
    bool[3] pauseMenuItemsHovered;
    
    bool settingsVisible = false;
    
    bool fullscreen = false;
    
    String[7] videoModes = [
        "1024x768 / XGA",
        "1280x720 / HD",
        "1920x1080 / Full HD",
        "2560x1080 / UltraWide Full HD",
        "2560x1440 / 2k Quad HD",
        "3840x2160 / 4k Ultra HD",
        "7680x4320 / 8k Full Ultra HD"
    ];
    
    const(char)*[videoModes.length] videoModesPointers;
    int currentVideoMode = 1;
    
    uint[2][7] resolutions = [
        [1024, 768],
        [1280, 720],
        [1920, 1080],
        [2560, 1080],
        [2560, 1440],
        [3840, 2160],
        [7680, 4320]
    ];
    
    float soundEffectsVolume = 0.5f;
    float musicVolume = 0.5f;
    
    bool itemHovered = false;
    
    this(Game game, MainMenuScene scene, string[] args)
    {
        super(game.eventManager, game);
        this.game = game;
        this.mainMenuScene = scene;
        
        foreach(i, v; videoModes)
            videoModesPointers[i] = videoModes[i].ptr;
        
        igContext = igCreateContext(null);
        igSetCurrentContext(igContext);
        io = igGetIO();
        io.ConfigFlags |= ImGuiConfigFlags.DockingEnable;
        io.ConfigWindowsMoveFromTitleBarOnly = true;
        
        //auto font = ImFontAtlas_AddFontDefault(io.Fonts);
        
        ImWchar[] ranges = [
            0x0020, 0x00FF, // Basic Latin + Latin Supplement
            0x0370, 0x03FF, // Greek
            0x0400, 0x044F, // Cyrillic
            0
        ];
        
        fontRoboto = ImFontAtlas_AddFontFromFileTTF(io.Fonts, "assets/font/Roboto.ttf", 30, null, ranges.ptr);
        
        igStyleColorsDark(null);
        
        ImGui_ImplSDL2_InitForOpenGL(game.window, game.glcontext);
        ImGuiOpenGLBackend.init("#version 130");
        
        fullscreen = game.fullscreen;
        foreach(uint i, res; resolutions)
        {
            if (res[0] == game.width && res[1] == game.height)
            {
                currentVideoMode = i;
                break;
            }
        }

        game.config.props.set(DPropType.Number, "windowWidth", game.width.to!string);
        game.config.props.set(DPropType.Number, "windowHeight", game.height.to!string);
        game.config.props.set(DPropType.Number, "fullscreen", (cast(uint)game.fullscreen).to!string);
        
        if (("hideConsole" in game.config.props) is null)
            game.config.props.set(DPropType.Number, "hideConsole", "0");
        
        if (("soundEffectsVolume" in game.config.props) is null)
            game.config.props.set(DPropType.Number, "soundEffectsVolume", soundEffectsVolume.to!string);
        else
            soundEffectsVolume = game.config.props["soundEffectsVolume"].toFloat;
        
        if (("musicVolume" in game.config.props) is null)
            game.config.props.set(DPropType.Number, "musicVolume", musicVolume.to!string);
        else
            musicVolume = game.config.props["musicVolume"].toFloat;
        
        setSoundEffectsVolume(soundEffectsVolume);
        setMusicVolume(musicVolume);
    }
    
    void onProcessEvent(SDL_Event* event)
    {
        if (visible)
            ImGui_ImplSDL2_ProcessEvent(event);
    }
    
    bool capturesMouse() @property const
    {
        return io.WantCaptureMouse;
    }
    
    bool capturesKeyboard() @property const
    {
        return io.WantCaptureKeyboard;
    }
    
    void update(Time t)
    {
        processEvents();
        
        ImGuiOpenGLBackend.new_frame();
        ImGui_ImplSDL2_NewFrame();
        igNewFrame();
        
        viewport = cast(ImGuiViewport*)igGetMainViewport();
        
        ImGuiID mainDockSpaceId = igDockSpaceOverViewport(viewport, ImGuiDockNodeFlags.PassthruCentralNode);
        
        igPushStyleColor(ImGuiCol.TitleBgActive, ImVec4(1.0f, 0.5f, 0.2f, 0.9f));
        igPushStyleColor(ImGuiCol.FrameBg, ImVec4(0.0f, 0.0f, 0.0f, 0.0f));
        igPushStyleColor(ImGuiCol.ButtonHovered, ImVec4(1.0f, 1.0f, 1.0f, 0.5f));
        igPushStyleColor(ImGuiCol.Header, ImVec4(0.0f, 0.0f, 0.0f, 0.0f));
        igPushStyleColor(ImGuiCol.HeaderHovered, ImVec4(1.0f, 0.5f, 0.2f, 0.8f));
        igPushStyleColor(ImGuiCol.HeaderActive, ImVec4(1.0f, 0.5f, 0.2f, 0.8f));
        igPushStyleColor(ImGuiCol.CheckMark, ImVec4(1.0f, 1.0f, 0.0f, 1.0f));
        igPushStyleColor(ImGuiCol.SliderGrab, ImVec4(1.0f, 0.5f, 0.2f, 0.8f));
        igPushStyleColor(ImGuiCol.SliderGrabActive, ImVec4(1.0f, 0.5f, 0.2f, 0.8f));
        
        
        if (game.currentScene is mainMenuScene)
        {
            renderMainMenu();
        }
        else
        {
            renderPauseBackground();
            renderPauseMenu();
        }
        
        if (settingsVisible)
            renderSettings();
        
        igRender();
    }
    
    void renderPauseBackground()
    {
        igSetNextWindowSize(ImVec2(eventManager.windowWidth, eventManager.windowHeight));
        igSetNextWindowPos(ImVec2(0, 0));
        igPushStyleColor(ImGuiCol.WindowBg, ImVec4(0.0f, 0.0f, 0.0f, 0.5f));
        if (igBegin("PauseBackground", null, defaultFlags))
        {
            igEnd();
        }
    }
    
    void renderMainMenu()
    {
        igSetNextWindowSize(ImVec2(250, eventManager.windowHeight));
        igSetNextWindowPos(ImVec2(0, 0));
        igPushStyleColor(ImGuiCol.WindowBg, ImVec4(0.0f, 0.0f, 0.0f, 0.8f));
        if (igBegin("MainMenu", null, defaultFlags))
        {
            if (igBeginListBox("##listbox1", ImVec2(0, 5 * igGetTextLineHeightWithSpacing())))
            {
                bool hoverSoundPlayed = false;
                
                size_t selectedMainMenuItem = 0;
                
                foreach(i, v; mainMenuItems)
                {
                    bool isSelected = (selectedMainMenuItem == i);
                    if (igSelectable(mainMenuItems[i].ptr, isSelected))
                        selectedMainMenuItem = i;
                    
                    if (isSelected)
                    {
                        igSetItemDefaultFocus();
                    }
                    
                    if (igIsItemHovered())
                    {
                        if (mainMenuItemsHovered[i] == false && hoverSoundPlayed == false)
                        {
                            mainMenuItemsHovered[i] = true;
                            hoverSoundPlayed = true;
                            playSound("assets/sounds/keypress.wav");
                        }
                    }
                    else
                    {
                        mainMenuItemsHovered[i] = false;
                    }
                    
                    if (igIsItemClicked())
                    {
                        playSound("assets/sounds/close.wav");
                        
                        switch(i)
                        {
                            case 0:
                                settingsVisible = false;
                                visible = false;
                                stopMusic();
                                game.setCurrentScene(New!GameScene(game, this));
                                break;
                            case 1:
                                settingsVisible = !settingsVisible;
                                break;
                            case 2:
                                game.exit();
                                break;
                            default:
                                break;
                        }
                    }
                }
                
                igEndListBox();
            }
            
            igEnd();
        }
    }
    
    void renderPauseMenu()
    {
        igSetNextWindowSize(ImVec2(250, eventManager.windowHeight));
        igSetNextWindowPos(ImVec2(0, 0));
        igPushStyleColor(ImGuiCol.WindowBg, ImVec4(0.0f, 0.0f, 0.0f, 0.8f));
        if (igBegin("PauseMenu", null, defaultFlags))
        {
            if (igBeginListBox("##listbox2", ImVec2(0, 5 * igGetTextLineHeightWithSpacing())))
            {
                bool hoverSoundPlayed = false;
                
                size_t selectedPauseMenuItem = 0;
                
                foreach(i, v; pauseMenuItems)
                {
                    bool isSelected = (selectedPauseMenuItem == i);
                    if (igSelectable(pauseMenuItems[i].ptr, isSelected))
                        selectedPauseMenuItem = i;
                    
                    if (isSelected)
                        igSetItemDefaultFocus();
                    
                    if (igIsItemHovered())
                    {
                        if (pauseMenuItemsHovered[i] == false && hoverSoundPlayed == false)
                        {
                            pauseMenuItemsHovered[i] = true;
                            hoverSoundPlayed = true;
                            playSound("assets/sounds/keypress.wav");
                        }
                    }
                    else
                    {
                        pauseMenuItemsHovered[i] = false;
                    }
                    
                    if (igIsItemClicked())
                    {
                        playSound("assets/sounds/close.wav");
                        
                        switch(i)
                        {
                            case 0:
                                eventManager.generateUserEvent(1);
                                break;
                            case 1:
                                settingsVisible = !settingsVisible;
                                break;
                            case 2:
                                settingsVisible = false;
                                visible = false;
                                stopMusic();
                                game.setCurrentScene("MainMenu", true);
                                break;
                            default:
                                break;
                        }
                    }
                }
                
                igEndListBox();
            }
            
            igEnd();
        }
    }
    
    void renderSettings()
    {
        float windowWidth = 700.0f;
        float windowHeight = 480.0f;
        igSetNextWindowSize(ImVec2(windowWidth, windowHeight));
        igSetNextWindowPos(ImVec2(cast(float)eventManager.windowWidth * 0.5 - windowWidth * 0.5, cast(float)eventManager.windowHeight * 0.5 - windowHeight * 0.5));
        igPushStyleColor(ImGuiCol.WindowBg, ImVec4(0.0f, 0.0f, 0.0f, 0.8f));
        if (igBegin("Settings", &settingsVisible, ImGuiWindowFlags.NoCollapse | ImGuiWindowFlags.NoDocking | ImGuiWindowFlags.NoResize))
        {
            igPushStyleColor(ImGuiCol.FrameBg, ImVec4(1.0f, 0.5f, 0.2f, 0.5f));
            igPushStyleColor(ImGuiCol.FrameBgHovered, ImVec4(1.0f, 0.5f, 0.2f, 0.75f));
            
            bool changed = false;
            
            if (igCombo_Str_arr("Video mode", &currentVideoMode, videoModesPointers.ptr, videoModesPointers.length))
            {
                writeln("Video mode: ", videoModes[currentVideoMode]);
                auto windowSize = resolutions[currentVideoMode];
                game.setWindowSize(windowSize[0], windowSize[1]);
                game.centerWindow();
                game.currentScene.onResize(windowSize[0], windowSize[1]);
                game.config.props.set(DPropType.Number, "windowWidth", windowSize[0].to!string);
                game.config.props.set(DPropType.Number, "windowHeight", windowSize[1].to!string);
                changed = true;
            }
            
            if (igCheckbox("Fullscreen", &fullscreen))
            {
                writeln("Fullscreen: ", fullscreen);
                game.setFullscreen(fullscreen);
                game.centerWindow();
                game.config.props.set(DPropType.Number, "fullscreen", (cast(uint)fullscreen).to!string);
                changed = true;
            }
            
            if (igSliderFloat("Sound effects volume", &soundEffectsVolume, 0.0f, 1.0f, "%.2f"))
            {
                setSoundEffectsVolume(soundEffectsVolume);
                playSound("assets/sounds/keypress.wav", true);
                game.config.props.set(DPropType.Number, "soundEffectsVolume", soundEffectsVolume.to!string);
                changed = true;
            }
            
            if (igSliderFloat("Music volume", &musicVolume, 0.0f, 1.0f, "%.2f"))
            {
                setMusicVolume(musicVolume);
                game.config.props.set(DPropType.Number, "musicVolume", musicVolume.to!string);
                changed = true;
            }
            
            if (changed)
            {
                // TODO: async update
                writeSettingsFile();
            }
            
            igEnd();
        }
        
        if (!settingsVisible)
            playSound("assets/sounds/close.wav");
    }
    
    void writeSettingsFile()
    {
        String output;
        foreach(k, v; game.config.props)
        {
            output ~= k;
            output ~= ": ";
            output ~= v.data;
            output ~= ";\n";
        }
        
        write("settings.conf", output);
        output.free();
    }
    
    void render()
    {
        ImGuiOpenGLBackend.render_draw_data(igGetDrawData());
    }
    
    override void onResize(int width, int height)
    {
        game.config.props.set(DPropType.Number, "windowWidth", width.to!string);
        game.config.props.set(DPropType.Number, "windowHeight", height.to!string);
        writeSettingsFile();
    }
}
